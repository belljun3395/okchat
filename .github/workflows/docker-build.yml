name: Docker Build and Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'Dockerfile'
      - 'build.gradle.kts'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'Dockerfile'
      - 'build.gradle.kts'
  workflow_dispatch:  # ÏàòÎèô Ïã§Ìñâ
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: okchat-dev-app
  EKS_CLUSTER_NAME: okchat-dev

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Image digest
        run: echo ${{ steps.build.outputs.digest }}

  deploy-to-eks:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://okchat-dev.example.com  # Ïã§Ï†ú URLÎ°ú Î≥ÄÍ≤Ω
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/okchat-app \
            okchat=${{ needs.build-and-push.outputs.image-tag }} \
            -n okchat
          
          kubectl rollout status deployment/okchat-app -n okchat --timeout=5m

      - name: Verify deployment
        run: |
          kubectl get pods -n okchat -l app=okchat-app
          kubectl get deployment okchat-app -n okchat

      - name: Run smoke tests
        run: |
          # ALB URL Í∞ÄÏ†∏Ïò§Í∏∞
          INGRESS_URL=$(kubectl get ingress okchat-ingress -n okchat -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # Health check
          echo "Testing health endpoint..."
          curl -f http://${INGRESS_URL}/actuator/health || exit 1
          
          echo "Deployment successful! üéâ"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-to-eks]
    if: always()
    
    steps:
      - name: Deployment Success
        if: needs.deploy-to-eks.result == 'success'
        run: |
          echo "‚úÖ Deployment successful!"
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"

      - name: Deployment Failed
        if: needs.deploy-to-eks.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          exit 1