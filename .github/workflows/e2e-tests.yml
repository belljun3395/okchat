name: E2E Tests

on:
  push:
    branches: [ main, develop, cursor/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: e2e-tests/package-lock.json

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install Playwright dependencies
        working-directory: e2e-tests
        run: |
          npm ci
          npx playwright install --with-deps chromium

      - name: Build application
        run: ./gradlew build -x test

      - name: Run E2E tests
        working-directory: e2e-tests
        run: npm test
        env:
          CI: true
          BASE_URL: http://localhost:8080
          SPRING_PROFILES_ACTIVE: e2e

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: e2e-tests/playwright-report/
          retention-days: 30

      - name: Upload test screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-screenshots
          path: e2e-tests/test-results/
          retention-days: 7

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'e2e-tests/test-results/results.json';
            
            if (fs.existsSync(reportPath)) {
              const results = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              const { stats } = results;
              
              const comment = `## üß™ E2E Test Results
              
              - ‚úÖ **Passed**: ${stats.passed || 0}
              - ‚ùå **Failed**: ${stats.failed || 0}
              - ‚è≠Ô∏è **Skipped**: ${stats.skipped || 0}
              - ‚è±Ô∏è **Duration**: ${Math.round((stats.duration || 0) / 1000)}s
              
              ${stats.failed > 0 ? '‚ö†Ô∏è Some tests failed. Check the artifacts for details.' : '‚ú® All tests passed!'}
              
              [View full report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
