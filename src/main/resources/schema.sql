-- Spring Cloud Task tables for MySQL

CREATE TABLE IF NOT EXISTS TASK_EXECUTION (
    TASK_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    START_TIME DATETIME(6) NULL,
    END_TIME DATETIME(6) NULL,
    TASK_NAME VARCHAR(100) NULL,
    EXIT_CODE INTEGER NULL,
    EXIT_MESSAGE TEXT NULL,
    ERROR_MESSAGE TEXT NULL,
    LAST_UPDATED DATETIME(6) NULL,
    EXTERNAL_EXECUTION_ID VARCHAR(255) NULL,
    PARENT_EXECUTION_ID BIGINT NULL
);

CREATE TABLE IF NOT EXISTS TASK_EXECUTION_PARAMS (
    TASK_EXECUTION_ID BIGINT NOT NULL,
    TASK_PARAM VARCHAR(250) NOT NULL,
    PRIMARY KEY (TASK_EXECUTION_ID, TASK_PARAM)
);

CREATE TABLE IF NOT EXISTS TASK_TASK_BATCH (
    TASK_EXECUTION_ID BIGINT NOT NULL,
    JOB_EXECUTION_ID BIGINT NOT NULL
);

CREATE TABLE IF NOT EXISTS TASK_EXECUTION_METADATA (
    ID BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    TASK_EXECUTION_ID BIGINT NOT NULL,
    TASK_EXECUTION_MANIFEST TEXT NULL
);

CREATE TABLE IF NOT EXISTS TASK_LOCK (
    LOCK_KEY VARCHAR(36) NOT NULL,
    REGION VARCHAR(100) NOT NULL,
    CLIENT_ID VARCHAR(36) NULL,
    CREATED_DATE DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    PRIMARY KEY (LOCK_KEY, REGION)
);

CREATE TABLE IF NOT EXISTS TASK_SEQ (
    ID BIGINT NOT NULL,
    UNIQUE_KEY CHAR(1) NOT NULL,
    CONSTRAINT UNIQUE_KEY_UN UNIQUE (UNIQUE_KEY)
);

INSERT INTO TASK_SEQ (ID, UNIQUE_KEY) SELECT * FROM (SELECT 0 AS ID, '0' AS UNIQUE_KEY) AS TMP WHERE NOT EXISTS(SELECT * FROM TASK_SEQ);

-- Prompts table for versioned prompt management
CREATE TABLE IF NOT EXISTS prompts (
    id BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    type VARCHAR(100) NOT NULL,
    version INT NOT NULL,
    content TEXT NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    UNIQUE KEY uk_type_version (type, version),
    INDEX idx_type_active (type, is_active),
    INDEX idx_type_version_active (type, version, is_active)
);

-- Users table for permission management
CREATE TABLE IF NOT EXISTS users (
    id BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    email VARCHAR(255) NOT NULL UNIQUE,
    name VARCHAR(100) NOT NULL,
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    active BOOLEAN NOT NULL DEFAULT TRUE,
    INDEX idx_user_email (email)
);

-- Document path permissions table
CREATE TABLE IF NOT EXISTS document_path_permissions (
    id BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT NOT NULL,
    document_path VARCHAR(500) NOT NULL,
    space_key VARCHAR(50),
    permission_level VARCHAR(20) NOT NULL DEFAULT 'READ',
    granted_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    granted_by BIGINT,
    INDEX idx_path_perm_user (user_id),
    INDEX idx_path_perm_path (document_path),
    INDEX idx_path_perm_user_path (user_id, document_path),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Pending email replies table for email review workflow
CREATE TABLE IF NOT EXISTS pending_email_replies (
    id BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    from_email VARCHAR(255) NOT NULL,
    to_email VARCHAR(255) NOT NULL,
    original_subject VARCHAR(500) NOT NULL,
    original_content TEXT,
    reply_content TEXT NOT NULL,
    provider_type VARCHAR(20) NOT NULL,
    message_id VARCHAR(500),
    status VARCHAR(20) NOT NULL DEFAULT 'PENDING',
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    reviewed_at DATETIME(6),
    reviewed_by VARCHAR(255),
    sent_at DATETIME(6),
    rejection_reason TEXT,
    INDEX idx_pending_email_status (status),
    INDEX idx_pending_email_created (created_at),
    INDEX idx_pending_email_from (from_email)
);
